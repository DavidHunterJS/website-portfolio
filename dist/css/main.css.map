{"version":3,"sources":["pages/_section-2.sass","pages/_section-1.sass","layout/_navigation.sass","pages/_section-3-slide-1.sass","layout/_backgrounds.sass","utils/_variables.sass","vendors/_mq.scss","pages/_section-3-slide-2.sass","pages/_section-4.sass"],"names":[],"mappings":"AAWA,WCTA,eCFA,UCAA,UAIC,kBCJD,WACkB,sBACE,4BACE,kCACtB,YACmB,qCACnB,OACC,qCACD,UACC,qCACD,YACmB,qCFXnB,UACC,eACA,WACA,UACA,gBACA,YACO,WAER,QACC,YACA,aACA,qBACA,8BAIM,eGRiB,8BHUjB,iBACJ,WACD,cACY,+BACP,gBACJ,yBACD,UACA,qBACA,gBACA,cACW,gBGzBC,WH6Bd,cACyB,4BACG,+BAI5B,aAC0B,6BACG,gCIiLrB,2BJjNJ,QAMK,UACK,eASR,UAOH,cACC,cAIF,yBACA,4BACE,aAIuB,0BACzB,8BD3CF,WACO,+DACP,eACC,aACA,wBACA,mBAEA,8BACc,kBACN,UACI,0BACb,WACC,+BACA,oBACA,WACD,YACC,gBACA,gBACA,oBACA,cACD,WACY,gBACK,oBIlBE,cLJnB,gBACU,YACG,eAEb,YACC,gCACA,wBACA,cACA,gBACA,gBACe,mBGVhB,UIAA,QAIC,kBPOD,WAEC,oBGbD,UACS,aACA,iBAGR,UACA,+DACA,+BAAA,uBIPD,QACS,WFEK,WEAD,0BAEb,QACY,cCLZ,qBACC,cACC,2BACA,eACA,cAEF,mBHDkB,yBGIlB,eACC,8BAED,eHJuB,8BGMR,yBACb,6BFyMM,2BE5MJ,eAMU,kBACD,gBAEX,sBAEA,YAEA,OAEA","file":"main.css","sourcesContent":["// section 2\r\n.about-transbox // semi-transparent bg on about page\r\n\tpadding: 1em\r\n\tmargin-top: 20%\r\n\r\n.about-text\r\n\tbackground: rgba(215, 235, 255, 0.5)\r\n\tbox-shadow: 0 0 65px 1px\r\n\tcolor: #303B62\r\n\tfont-size: 1.8em\r\n\tfont-weight: 600\t\r\n\tborder-radius: 10px\r\n.about-tag\r\n\ttext-align: center\r\n\tletter-spacing: 10px","// section 1 - home page\r\n.main-font\r\n\tfont: 100 1em $Helvetica\r\n.main-transbox // transparent box on page one\r\n\tpadding: 20px\r\n\tmargin: 0 30px 30px 30px\r\n\tborder-radius: 10px\r\n\ttext-align: center\r\n\tbackground: $color-transblue\r\n\thr\r\n\t\twidth: 85%\r\n\t\tborder-top:3px solid $color-white\r\n.main-name\r\n\tfont: 5em \"Abril Fatface\", serif\r\n\tletter-spacing: .4em\r\n\tcolor: $color-white\r\n.main-title\r\n\tfont-size : 1.8em\r\n\tline-height: 2px\r\n\tletter-spacing: .2em\r\n\tcolor: $color-light-gray\r\n.main-jscs\r\n\tfont-size: 2.5em\r\n\tletter-spacing: .4em\r\n\tcolor: $color-light-gray","// navigation menu\r\n.nav-menu\r\n\tposition:fixed\r\n\tz-index: 70\r\n\tpadding: 0\r\n\tmargin-top:10px\r\n\theight: 40px\r\n\twidth: 100%\r\n\ttext-align: center\r\n.nav-li \r\n\tmargin: -2px\r\n\tmargin-top: 0\r\n\tdisplay:inline-block\r\n\tbackground: $color-transblue\r\n\t+mq($until: tablet)\r\n\t\twidth: 25%\r\n\t\tmargin-top: -2%\r\n\t&.active\r\n\t\tbackground: $color-transblue-light\r\n\t\ta\r\n\t\t\tcolor: $color-white\r\n\t&:hover\r\n\t\tbackground: rgba(2,101,255, 0.35)\r\n\t\ta\r\n\t\t\tcolor: $color-transblue-light\r\n\ta\r\n\t\ttext-decoration:none\r\n\t\tpadding: 1em 3em\r\n\t\tdisplay:block\r\n\t\tfont-size: 1.6em\r\n\t\tcolor: $color-black\r\n\t\t+mq($until: tablet)\r\n\t\t\tfont-size: 2em\r\n.nav-li-first\r\n\tborder-top-left-radius: 10px\r\n\tborder-bottom-left-radius: 10px\r\n\t+mq($until: tablet)\r\n\t\tborder-top-left-radius: 0\r\n\t\tborder-bottom-left-radius: 0\r\n.nav-li-last\r\n\tborder-top-right-radius: 10px\r\n\tborder-bottom-right-radius: 10px\r\n\t+mq($until: tablet)\r\n\t\tborder-top-right-radius: 0\r\n\t\tborder-bottom-right-radius: 0\r\n","// section 3 - slide 1\r\n.projects\r\n\tmargin: 0 32%\r\n\tborder: 5px solid\r\n\tborder-radius: 5px\r\n\ttext-align: center\r\n\tcolor: $color-red\r\n\tfont: 600 4em $Helvetica\r\n\ttransform: skew(-20deg)","// Background Stuff\r\n// bg image layout\r\n.bg-layout\r\n\tbackground-size: cover\r\n\tbackground-repeat: no-repeat\r\n\tbackground-position: center center\r\n// background images\r\n.bg-burdell\r\n\tbackground-image: url(\"../img/bg1.jpg\")\r\n.bg-sf\r\n\tbackground-image: url(\"../img/bg2.jpg\")\r\n.bg-space\r\n\tbackground-image: url(\"../img/bg3.jpg\")\r\n.bg-tomales\r\n\tbackground-image: url(\"../img/bg4.jpg\")","$mq-breakpoints: (mobile:  320px, mobile-wide: 480px, tablet:  740px, desktop: 980px, wide: 1300px);\r\n\r\n$color-white: #ffffff\r\n$color-black: #000000\r\n$color-light-gray: #C8C8C8\r\n$color-red: #FF0000\r\n$color-aliceblue: #F0F8FF\r\n$color-transblue: rgba(0, 129, 255, 0.3)  // transparent blue\r\n$color-transblue-light: rgba(0,100,255, 0.7)\r\n$color-transblue-dark: rgba(0, 129, 255, 0.8)\r\n$color-transblue-darker: rgba(36, 57, 77, 0.8)\r\n$Helvetica: \"Helvetica Neue\", \"Open Sans\", Helvetica, sans-serif\r\n","@charset \"UTF-8\"; // Fixes an issue where Ruby locale is not set properly\n                  // See https://github.com/sass-mq/sass-mq/pull/10\n\n/// Base font size on the `<body>` element\n/// @type Number (unit)\n$mq-base-font-size: 16px !default;\n\n/// Responsive mode\n///\n/// Set to `false` to enable support for browsers that do not support @media queries,\n/// (IE <= 8, Firefox <= 3, Opera <= 9)\n///\n/// You could create a stylesheet served exclusively to older browsers,\n/// where @media queries are rasterized\n///\n/// @example scss\n///  // old-ie.scss\n///  $mq-responsive: false;\n///  @include 'main'; // @media queries in this file will be rasterized up to $mq-static-breakpoint\n///                   // larger breakpoints will be ignored\n///\n/// @type Boolean\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-off Disabled responsive mode documentation\n$mq-responsive: true !default;\n\n/// Breakpoint list\n///\n/// Name your breakpoints in a way that creates a ubiquitous language\n/// across team members. It will improve communication between\n/// stakeholders, designers, developers, and testers.\n///\n/// @type Map\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint Full documentation and examples\n$mq-breakpoints: (\n    mobile:  320px,\n    tablet:  740px,\n    desktop: 980px,\n    wide:    1300px\n) !default;\n\n/// Static breakpoint (for fixed-width layouts)\n///\n/// Define the breakpoint from $mq-breakpoints that should\n/// be used as the target width for the fixed-width layout\n/// (i.e. when $mq-responsive is set to 'false') in a old-ie.scss\n///\n/// @example scss\n///  // tablet-only.scss\n///  //\n///  // Ignore all styles above tablet breakpoint,\n///  // and fix the styles (e.g. layout) at tablet width\n///  $mq-responsive: false;\n///  $mq-static-breakpoint: tablet;\n///  @include 'main'; // @media queries in this file will be rasterized up to tablet\n///                   // larger breakpoints will be ignored\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#adding-custom-breakpoints Full documentation and examples\n$mq-static-breakpoint: desktop !default;\n\n/// Show breakpoints in the top right corner\n///\n/// If you want to display the currently active breakpoint in the top\n/// right corner of your site during development, add the breakpoints\n/// to this list, ordered by width, e.g. (mobile, tablet, desktop).\n///\n/// @type map\n$mq-show-breakpoints: () !default;\n\n/// Customize the media type (e.g. `@media screen` or `@media print`)\n/// By default sass-mq uses an \"all\" media type (`@media all and …`)\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#changing-media-type Full documentation and examples\n$mq-media-type: all !default;\n\n/// Convert pixels to ems\n///\n/// @param {Number} $px - value to convert\n/// @param {Number} $base-font-size ($mq-base-font-size) - `<body>` font size\n///\n/// @example scss\n///  $font-size-in-ems: mq-px2em(16px);\n///  p { font-size: mq-px2em(16px); }\n///\n/// @requires $mq-base-font-size\n/// @returns {Number}\n@function mq-px2em($px, $base-font-size: $mq-base-font-size) {\n    @if unitless($px) {\n        @warn \"Assuming #{$px} to be in pixels, attempting to convert it into pixels.\";\n        @return mq-px2em($px + 0px); // That may fail.\n    } @else if unit($px) == em {\n        @return $px;\n    }\n    @return ($px / $base-font-size) * 1em;\n}\n\n/// Get a breakpoint's width\n///\n/// @param {String} $name - Name of the breakpoint. One of $mq-breakpoints\n///\n/// @example scss\n///  $tablet-width: mq-get-breakpoint-width(tablet);\n///  @media (min-width: mq-get-breakpoint-width(desktop)) {}\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @returns {Number} Value in pixels\n@function mq-get-breakpoint-width($name, $breakpoints: $mq-breakpoints) {\n    @if map-has-key($breakpoints, $name) {\n        @return map-get($breakpoints, $name);\n    } @else {\n        @warn \"Breakpoint #{$name} wasn't found in $breakpoints.\";\n    }\n}\n\n/// Media Query mixin\n///\n/// @param {String | Boolean} $from (false) - One of $mq-breakpoints\n/// @param {String | Boolean} $until (false) - One of $mq-breakpoints\n/// @param {String | Boolean} $and (false) - Additional media query parameters\n/// @param {String} $media-type ($mq-media-type) - Media type: screen, print…\n///\n/// @ignore Undocumented API, for advanced use only:\n/// @ignore @param {Map} $breakpoints ($mq-breakpoints)\n/// @ignore @param {String} $static-breakpoint ($mq-static-breakpoint)\n///\n/// @content styling rules, wrapped into a @media query when $responsive is true\n///\n/// @requires {Variable} $mq-media-type\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-static-breakpoint\n/// @requires {function} mq-px2em\n/// @requires {function} mq-get-breakpoint-width\n///\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-on-default Full documentation and examples\n///\n/// @example scss\n///  .element {\n///    @include mq($from: mobile) {\n///      color: red;\n///    }\n///    @include mq($until: tablet) {\n///      color: blue;\n///    }\n///    @include mq(mobile, tablet) {\n///      color: green;\n///    }\n///    @include mq($from: tablet, $and: '(orientation: landscape)') {\n///      color: teal;\n///    }\n///    @include mq(950px) {\n///      color: hotpink;\n///    }\n///    @include mq(tablet, $media-type: screen) {\n///      color: hotpink;\n///    }\n///    // Advanced use:\n///    $my-breakpoints: ( L: 900px, XL: 1200px );\n///    @include mq(L, $breakpoints: $my-breakpoints, $static-breakpoint: L) {\n///      color: hotpink;\n///    }\n///  }\n@mixin mq(\n    $from: false,\n    $until: false,\n    $and: false,\n    $media-type: $mq-media-type,\n    $breakpoints: $mq-breakpoints,\n    $responsive: $mq-responsive,\n    $static-breakpoint: $mq-static-breakpoint\n) {\n    $min-width: 0;\n    $max-width: 0;\n    $media-query: '';\n\n    // From: this breakpoint (inclusive)\n    @if $from {\n        @if type-of($from) == number {\n            $min-width: mq-px2em($from);\n        } @else {\n            $min-width: mq-px2em(mq-get-breakpoint-width($from, $breakpoints));\n        }\n    }\n\n    // Until: that breakpoint (exclusive)\n    @if $until {\n        @if type-of($until) == number {\n            $max-width: mq-px2em($until);\n        } @else {\n            $max-width: mq-px2em(mq-get-breakpoint-width($until, $breakpoints)) - .01em;\n        }\n    }\n\n    // Responsive support is disabled, rasterize the output outside @media blocks\n    // The browser will rely on the cascade itself.\n    @if $responsive == false {\n        $static-breakpoint-width: mq-get-breakpoint-width($static-breakpoint, $breakpoints);\n        $target-width: mq-px2em($static-breakpoint-width);\n        // Output only rules that start at or span our target width\n        @if ($and == false and ($min-width <= $target-width) and (($until == false) or ($max-width >= $target-width))) {\n            @content;\n        }\n    }\n\n    // Responsive support is enabled, output rules inside @media queries\n    @else {\n        @if $min-width != 0 { $media-query: '#{$media-query} and (min-width: #{$min-width})'; }\n        @if $max-width != 0 { $media-query: '#{$media-query} and (max-width: #{$max-width})'; }\n        @if $and            { $media-query: '#{$media-query} and #{$and}'; }\n\n        // Remove unnecessary media query prefix 'all and '\n        @if ($media-type == 'all' and $media-query != '') {\n            $media-type: '';\n            $media-query: str-slice(unquote($media-query), 6);\n        }\n\n        @media #{$media-type + $media-query} {\n            @content;\n        }\n    }\n}\n\n/// Add a breakpoint\n///\n/// @param {String} $name - Name of the breakpoint\n/// @param {Number} $width - Width of the breakpoint\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @example scss\n///  @include mq-add-breakpoint(tvscreen, 1920px);\n///  @include mq(tvscreen) {}\n@mixin mq-add-breakpoint($name, $width) {\n    $new-breakpoint: ($name: $width);\n    $mq-breakpoints: map-merge($mq-breakpoints, $new-breakpoint) !global;\n}\n\n/// Show the active breakpoint in the top right corner of the viewport\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint\n///\n/// @param {List} $show-breakpoints ($mq-show-breakpoints) - List of breakpoints to show in the top right corner\n/// @param {Map} $breakpoints ($mq-breakpoints) - Breakpoint names and sizes\n///\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-show-breakpoints\n///\n/// @example scss\n///  // Show breakpoints using global settings\n///  @include mq-show-breakpoints;\n///\n///  // Show breakpoints using custom settings\n///  @include mq-show-breakpoints((L, XL), (S: 300px, L: 800px, XL: 1200px));\n@mixin mq-show-breakpoints($show-breakpoints: $mq-show-breakpoints, $breakpoints: $mq-breakpoints) {\n    body:before {\n        background-color: #FCF8E3;\n        border-bottom: 1px solid #FBEED5;\n        border-left: 1px solid #FBEED5;\n        color: #C09853;\n        font: small-caption;\n        padding: 3px 6px;\n        pointer-events: none;\n        position: fixed;\n        right: 0;\n        top: 0;\n        z-index: 100;\n\n        // Loop through the breakpoints that should be shown\n        @each $show-breakpoint in $show-breakpoints {\n            $width: mq-get-breakpoint-width($show-breakpoint, $breakpoints);\n            @include mq($show-breakpoint, $breakpoints: $breakpoints) {\n                content: \"#{$show-breakpoint} ≥ #{$width} (#{mq-px2em($width)})\";\n            }\n        }\n    }\n}\n\n@if length($mq-show-breakpoints) > 0 {\n    @include mq-show-breakpoints;\n}\n","// section 3 - slide 2\r\n.slides\r\n\theight: 50%\r\n\tcolor: $color-black\r\n\tbackground: rgba(1,1,2, 0.5)\r\n\tborder-radius: 5px\r\n.titles\r\n\tfont-size: 3em\r\n","//section 4\r\n\r\n// 'contact me' text color in jumbotron banner\r\n.contact-messageArea\r\n\tcolor: $color-aliceblue\r\n\t// small text in jumbotron banner\r\n\tsmall \r\n\t\tfont-size: 24px\r\n\t\tcolor: $color-aliceblue\r\n\r\n// the form's text inputs background color \r\n// since I'm using the generic bootstrap selector .form-control\r\n// I've added the parent selector as assurance that it would only be used on this page\r\n#sd4> .form-control\r\n\tbackground-color: $color-aliceblue\r\n\r\n// form input wrapper and banner background\r\n.contact-color\r\n\tbackground: $color-transblue\r\n\r\n// color for div with globe and contact details\r\n.contact-deets\r\n\tbackground: $color-transblue-dark\r\n\t// background color over email address making it easier to read\r\n\taddress a\r\n\t\tbackground: $color-transblue-darker\r\n\t/* centers and enlarges text in contact details on mobile */\r\n\t+mq($until: tablet)\r\n\t\ttext-align: center\r\n\t\tfont-size: 1.6em\r\n/* makes message area smaller on mobile */\t\t\r\ntextarea.form-control\t\r\n\t+mq($until: tablet)\r\n\t\theight: 10em\r\n/* contact info is enlarged on mobile */\r\nlegend\r\n\t+mq($until: tablet)\r\n\t\tfont-size: 1.5em"],"sourceRoot":"/source/"}